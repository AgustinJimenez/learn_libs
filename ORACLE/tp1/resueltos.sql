DECLARE
	TMP_TABLE PCK_PRESTAMO.T_CUOTAS;
BEGIN 
	TMP_TABLE := PCK_PRESTAMO.F_CALCULAR_CUOTAS( 10000, 12, 60 ); 	
END;

--==========================================================================================================================
SELECT ( LINE ||'/'|| POSITION ||' '|| TEXT ) ERROR FROM SYS.USER_ERRORS WHERE NAME LIKE '%PCK_PRESTAMO%' AND TYPE = 'PACKAGE';
SELECT OBJECT_NAME, OBJECT_TYPE, STATUS FROM DBA_OBJECTS WHERE OBJECT_NAME LIKE '%' || 'PCK_PRESTAMO' || '%';


--BEGIN PACKAGE 
CREATE OR REPLACE PACKAGE 
	PCK_PRESTAMO
AS

--BEGIN TYPE
	TYPE
		R_CUOTAS
	IS RECORD 
		( AMORTIZACION_CAPITAL NUMBER, INTERESES NUMBER, FECHA_VENCIMIENTO DATE );
--END TYPE	

--BEGIN TYPE
	TYPE
		T_CUOTAS
	IS TABLE OF
		R_CUOTAS
	INDEX BY
		binary_integer;
--END TYPE
		
--FUNCTION BEGIN

	FUNCTION F_CALCULAR_CUOTAS
	(
		CAPITAL NUMBER,
        TASA_INTERES_ANUAL NUMBER,
        PLAZO NUMBER
	)
	RETURN 
		T_CUOTAS;

--END FUNCTION
		
END;
--END PACKAGE




------------------------------------------------------------------------------------
SELECT ( LINE ||'/'|| POSITION ||' '|| TEXT ) ERROR FROM SYS.USER_ERRORS WHERE NAME = 'PCK_PRESTAMO' AND TYPE = 'PACKAGE BODY';
SELECT ( LINE ||'/'|| POSITION ||' '|| TEXT ) ERROR FROM SYS.USER_ERRORS WHERE NAME = 'F_CALCULAR_CUOTAS' AND TYPE = 'FUNCTION';


CREATE OR REPLACE PACKAGE BODY
	PCK_PRESTAMO
IS

--FUNCTION BEGIN
	FUNCTION F_CALCULAR_CUOTAS
    ( 
        CAPITAL NUMBER,
        TASA_INTERES_ANUAL NUMBER,
        PLAZO NUMBER
    ) 
    RETURN 
        T_CUOTAS
    IS
        CO NUMBER := CAPITAL;
        I NUMBER := (TASA_INTERES_ANUAL/100);
        N NUMBER := PLAZO;
        
        V_FECHA_VENCIMIENTO DATE := SYSDATE;
        V_MONTO_CUOTA NUMBER := ( 
		    						CO * ( I * POWER( (1+I), N ) )
			    			 	 	/
			    			 	 	( POWER( ( 1 + I ), N ) - 1 )
			    			 	 );
			    			 	 
        V_AMORTIZAR_MES_ANTERIOR NUMBER:= 0;
        V_INTERES NUMBER := 0;
        V_AMORTIZAR NUMBER := 0;
        V_RESTANTE NUMBER := CAPITAL;
        V_TAB_CUOTAS T_CUOTAS;
        V_MES_ANTERIOR DATE := SYSDATE;
    BEGIN
	    --DBMS_OUTPUT.PUT_LINE('PACKAGE BODY HAS BEGIN - ');
	    FOR V_INDEX IN 1..N LOOP
	    	--DBMS_OUTPUT.PUT_LINE('PACKAGE BODY HAS LOOP('||V_INDEX||') - ');
	    	V_INTERES := V_RESTANTE * I;
	    	--DBMS_OUTPUT.PUT_LINE('v_interes= ' || V_INTERES || ', i=' || I);
	    	V_RESTANTE := V_RESTANTE - ( V_MONTO_CUOTA - V_INTERES );
	    	
	    	BEGIN
		    	V_AMORTIZAR_MES_ANTERIOR := V_TAB_CUOTAS( V_INDEX-1 ).AMORTIZACION_CAPITAL;
		    EXCEPTION
		    	WHEN NO_DATA_FOUND THEN
		    		V_AMORTIZAR_MES_ANTERIOR := 0;
	    	END ;
	    	
	    	
	 		V_AMORTIZAR := ( V_MONTO_CUOTA - V_INTERES );
	    	
	 		BEGIN
		    	V_MES_ANTERIOR := V_TAB_CUOTAS( V_INDEX - 1 ).FECHA_VENCIMIENTO;
		    EXCEPTION
		    	WHEN NO_DATA_FOUND THEN
		    		V_MES_ANTERIOR := SYSDATE;
	    	END ;
	    	
	    	
	    	
	    	V_TAB_CUOTAS( V_INDEX ).AMORTIZACION_CAPITAL := (V_AMORTIZAR + V_AMORTIZAR_MES_ANTERIOR);
	    	V_TAB_CUOTAS( V_INDEX ).INTERESES := V_INTERES;
	    	V_TAB_CUOTAS( V_INDEX ).FECHA_VENCIMIENTO := ADD_MONTHS(V_MES_ANTERIOR, 1);
	    	DBMS_OUTPUT.PUT_LINE
	    	(
	    	'  ' 
	    	|| ROUND( V_TAB_CUOTAS( V_INDEX ).AMORTIZACION_CAPITAL, 3 ) 
	    	|| ' - ' || ROUND( V_TAB_CUOTAS( V_INDEX ).INTERESES, 3 ) || ' - ' 
	    	|| ROUND( V_TAB_CUOTAS( V_INDEX ).INTERESES, 3 ) 
	    	);
	    END LOOP;  
	  --SELECT * FROM V_TAB_CUOTAS;

	    RETURN V_TAB_CUOTAS;
    EXCEPTION 
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR EN FUNCTION CUOTAS' || '[ ' || TO_CHAR(SQLCODE)||': '|| SQLERRM || ' ]');
    END;
    --END FUNCTION
----------------------    
END;
--END PACKAGE BODY    
------------------------------------------------------------------------------------	

    
    
------------------------------------------------------------------------------------
    
CREATE OR REPLACE PROCEDURE
	P_GENERAR_PRESTAMO
	(
		MONTO_CAPITAL NUMBER,
		TIPO_PRESTAMO VARCHAR2,
		PLAZO NUMBER,
		NRO_SOCIO NUMBER
	)
IS

BEGIN
	SELECT 
		COUNT(*) COUNT_S
	FROM
		SOCIO
	WHERE
		ID_SOCIO = NRO_SOCIO;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
          DBMS_OUTPUT.PUT_LINE("NO EXISTE");
	
END;
	